<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="DB_Lesen_Komponenten" Id="{9dc4daa7-de5f-45e7-bc91-f17a1a2e4566}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM DB_Lesen_Komponenten
VAR
  FB_DB_Schliesse_Komponenten:FB_DBConnectionClose;

   
  a: ARRAY[0..200] OF ST_DB_KOMPONENTEN; 

  myInputVar :INPUT_VAR; 
  
  myOutputVar :OUTPUT_VAR; 
  
	FB_DB_Lese_Komponenten: FB_DBRecordArraySelect;
	sSelectString: STRING(800):= 'SELECT  * FROM komponenten';
	nRecIndex: UDINT;
	bStartStopSelect: BOOL;
	bBusySelect: BOOL;
	bErrorSelect: BOOL;
	stSQLStateSelect: TC2_DATABASE.ST_DBSQLError;
	nRecordCount: UDINT;
	Busy_Lesen:BOOL;
	start_Lesen_Komponenten:BOOL:=false;
	start_Schliessen_Komponenten:BOOL:=True;
	Counter: UDINT:=0;
	Abgeschlossen: BOOL:= FALSE;
	
	timer1: ton;
	timer1_start:BOOL:=TRUE;
	Lesen_nErrID: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bNeuInitialisieren THEN
	Abgeschlossen := FALSE;
END_IF

//timer1(IN:=TRUE,pt:=T#3S);

IF Abgeschlossen = FALSE THEN 
//=========================================================================================	
//Komponenten auslesen		
	FB_DB_Lese_Komponenten(
				sNetID:= , 
				hDBID:= 3, 
				pCmdAddr:= ADR(sSelectString), 
				cbCmdSize:= SIZEOF(sSelectString), 
				nStartIndex:= nRecIndex, 
				nRecordCount:=nRecordCount-1, 
				pDestAddr:= ADR(a), 
				cbRecordArraySize:= SIZEOF(a), 
				bExecute:= 	TRUE,//timer1.Q, 
				tTimeout:= T#5S, 
				bBusy=> Busy_Lesen, 
				bError=> SM.bFehler, 
				nErrID=> Lesen_nErrID , 
				sSQLState=> stSQLStateSelect, 
				nRecords=> nRecordCount); 
				
	start_Lesen_Komponenten:=FALSE;
				
	

	
	IF nRecordCount>0 THEN
		
		FOR counter:=0 TO nRecordCount-1 BY 1 DO
	   
		myinputvar.REAL_PARA_C:=STRING_TO_REAL(a[Counter].faktor_lin_c);
		myinputvar.REAL_PARA_M:=STRING_TO_REAL(a[Counter].faktor_lin_m);
		myinputvar.REAL_PARA_maxWert:=STRING_TO_REAL(a[Counter].maxwert);
		myinputvar.REAL_PARA_minWert:=STRING_TO_REAL(a[Counter].minwert);
		myinputvar.REAL_PARA_PT1_K:=STRING_TO_REAL(a[Counter].faktor_PT1_K);
		myinputvar.REAL_PARA_PT1_T:=STRING_TO_TIME(a[Counter].faktor_PT1_T);
		
		myOutputVar.REAL_PARA_C:=STRING_TO_REAL(a[Counter].faktor_lin_c);
		myOutputVar.REAL_PARA_M:=STRING_TO_REAL(a[Counter].faktor_lin_m);
		myOutputVar.REAL_PARA_maxWert:=STRING_TO_REAL(a[Counter].maxwert);
		myOutputVar.REAL_PARA_minWert:=STRING_TO_REAL(a[Counter].minwert);
		
		
	//=========================================================================================	
	//Temperaturen		
			IF a[counter].symbolname = 'GVL.Temp_VD_in' THEN
				GVL.Temp_VD_in :=myinputVar;
			END_IF		
			IF a[counter].symbolname = 'GVL.Temp_VD_out' THEN
				GVL.Temp_VD_out :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_VD_in_rev' THEN
				GVL.Temp_VD_in_rev :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_VD_out_rev' THEN
				GVL.Temp_VD_out_rev :=myinputVar;
			END_IF						
			IF a[counter].symbolname = 'GVL.Temp_VD_surface1' THEN
				GVL.Temp_VD_surface1 :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_VD_surface2' THEN
				GVL.Temp_VD_surface2 :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_VD_surface3' THEN
				GVL.Temp_VD_surface3 :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_VD_surface4' THEN
				GVL.Temp_VD_surface4 :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_VF_in' THEN
				GVL.Temp_VF_in :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_VF_out' THEN
				GVL.Temp_VF_out :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_VD_defrost_in' THEN
				GVL.Temp_VD_defrost_in :=myinputVar;
			END_IF		
			IF a[counter].symbolname = 'GVL.Temp_VD_defrost_out' THEN
				GVL.Temp_VD_defrost_out :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_KP_in' THEN
				GVL.Temp_KP_in :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_KP_out' THEN
				GVL.Temp_KP_out :=myinputVar;
			END_IF	
			IF a[counter].symbolname = 'GVL.Temp_vor_EV' THEN
				GVL.Temp_vor_EV :=myinputVar;
			END_IF
			IF a[counter].symbolname = 'GVL.Temp_vor_EV_rev' THEN
				GVL.Temp_vor_EV_rev :=myinputVar;
			END_IF
		
	//=========================================================================================	
	//Stellsignal Elektrische Heizracks
			IF a[counter].symbolname = 'GVL.ElektHeizrack1' THEN
				GVL.ElektHeizrack1:=myOutputVar;
			END_IF		
			IF a[counter].symbolname = 'GVL.ElektHeizrack2' THEN
				GVL.ElektHeizrack2:=myOutputVar;
			END_IF	
			IF a[counter].symbolname = 'GVL.ElektHeizrack_Boden' THEN
				GVL.ElektHeizrack_Boden:=myOutputVar;
			END_IF	
		
	//=========================================================================================	
	//Stellsignal Kompressor
			IF a[counter].symbolname = 'GVL.Soll_KP' THEN
				GVL.Soll_KP:=myOutputVar;
			END_IF		
	
	//=========================================================================================	
	//Stellsignal Ventilatoren 
			IF a[counter].symbolname = 'GVL.Soll_VF_Ventilator' THEN
				GVL.Soll_VF_Ventilator := myOutputVar;
			END_IF		
			IF a[counter].symbolname = 'GVL.Soll_VD_defrost_Ventilator' THEN
				GVL.Soll_VD_defrost_Ventilator := myOutputVar;
			END_IF		
	
			
			END_FOR		
	ELSE
		 SM.bFehler:=TRUE;
	END_IF
	
	IF Busy_Lesen=FALSE AND nRecordCount>0  THEN
		//timer1(IN:= FALSE);
		FB_DB_Lese_Komponenten(bExecute:= FALSE);
		Abgeschlossen := TRUE;
	END_IF
	END_IF

	
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>