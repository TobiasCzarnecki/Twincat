<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="MAIN" Id="{7650379b-af73-431c-a084-bfa6692fa016}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	GetEnthalpie :FB_GetEnthalpie;
	Test :REAL;
	xTest: REAL;
	sTest: STRING;
	timer: TON;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[EnthalpieBerechnen();
	
(*Prüfen ob neu initialisiert werden muss*)
IF SM.bNeuInitialisieren THEN 		
	SM.Status:= Initialisieren;
END_IF




//Temperatur();
Schwerpunkt_Eismasse();
	Auslesen_Waagen();
	Auslesen_Modbus();
	ModbusRTU_COM();
	ModbusRTU_EL();


CASE SM.Status OF
	

Initialisieren: //Parameter und Standardwerte aus Datenbank lesen und übergeben
	
	IF bLeseStoffwerte THEN 
	DB_Lesen_r134a();				//Liest die Stoffwerte von dem Kältemittel R134a ein
	DB_Lesen_Enthalpie_r134a();		//Liest die Enthalpien abhängig von der Temperatur und dem Druck von dem Kältemittel R134a ein
	END_IF
	DB_Lesen_Komponenten();		
	DB_Lesen_PID();

		IF 	DB_Lesen_r134a.Busy_Lesen = FALSE 			//DB eingelesen =  TRUE 
		AND DB_Lesen_Enthalpie_r134a.Busy_Lesen = FALSE //DB eingelesen =  TRUE 
		AND DB_Lesen_Komponenten.Busy_Lesen = FALSE		//DB eingelesen =  TRUE 
		AND DB_Lesen_PID.Busy_Lesen = FALSE				//DB eingelesen =  TRUE 
// !!!		AND WAAGEN.bWaagenVorbelastet = TRUE 				// Waagen sind vorbelastet und Offset ist ermittelt & aktiviert
// !!!		AND Auslesen_Waagen.bGetOffset_Abgeschlossen = TRUE // Offset-Ermittlung der Waagen erfolgreich abgeschlossen
		AND SM.bFehler=FALSE 								// TRUE, wenn ein DB-Einlesevorgang nicht erfolgreich abgeschlossen wurde
		THEN	
				bLeseStoffwerte:= FALSE;

		//======nächster Modus====		
				SM.Status:= Lesen; //Initialisation abgeschlossen

	END_IF
	SM.bNeuInitialisieren:=FALSE;
	
Lesen: //Input von Klemmen Lesen und in native Werte umrechen

	Temperatur();
	(*Hintergrundkommunikationsprogramme*)


(*SM wird entweder auf Kühlen- oder einen der drei Abtau-Modi gestellt*)
	IF bKuehlen THEN 	
	//======nächster Modus====	
		SM.Status:=Kuehlen; //Regelbetrieb
	END_IF 
	
//Abtau-Modus wird gewählt		
	IF SM.bAbtauen_elektrisch THEN	
				SM.bAbtauen 					:= TRUE;
				SM.bKuehlen						:= FALSE;			
				SM.bAbtauen_Heissgas_oben 		:= FALSE;
				SM.bAbtauen_Heissgas_unten 		:= FALSE;
				SM.bManuellerModus				:= FALSE;
			
			bAnlagenschutzModus:=TRUE;
		//======nächster Modus====			
			SM.Status := Abtauen;
		END_IF
		
		IF SM.bAbtauen_Heissgas_oben THEN
				SM.bAbtauen 					:= TRUE;
				SM.bKuehlen						:=FALSE;
				SM.bAbtauen_elektrisch			:=FALSE;
				SM.bAbtauen_Heissgas_unten 		:=FALSE;
				SM.bManuellerModus				:=FALSE;
	
			bAnlagenschutzModus:=TRUE;
		//======nächster Modus====			
			SM.Status := Abtauen;
		END_IF
		
		IF SM.bAbtauen_Heissgas_unten THEN
				SM.bAbtauen 					:= TRUE;
				SM.bKuehlen						:=FALSE;
				SM.bAbtauen_elektrisch			:=FALSE;
				SM.bAbtauen_Heissgas_oben 		:=FALSE;
				SM.bManuellerModus				:=FALSE;
			
			bAnlagenschutzModus:=TRUE;
			
		//======nächster Modus====			
			SM.Status := Abtauen;
		END_IF
	
	IF NOT bKuehlen AND NOT bAbtauen_Heissgas_unten AND NOT bAbtauen_Heissgas_oben AND NOT bAbtauen_elektrisch THEN 
		SM.bFehler:= TRUE;
		
		//======nächster Modus====	
			SM.Status := Lesen;
	END_IF
	
				
Kuehlen:	// Der Verdampfer vereist. Der Timer "TimerVereisung" bestimmt die Zeit der Vereisung.

		//======nächster Modus====
			SM.Status:=Vollautomatik;  // Es wird automatisch in den Vollautomatik-Modus gewechselt, falls bManuellerModus-> FALSE ist

			IF SM.bManuellerModus THEN
				SM.bVollautomatikModbus			:= FALSE;
				SM.bAbtauen_Heissgas_oben 		:= FALSE;
				SM.bAbtauen_Heissgas_unten 		:= FALSE;
				SM.bAbtauen_elektrisch			:= FALSE;	
				
		//======nächster Modus====
			SM.Status:=Manuell;	
			END_IF
	
			
Vollautomatik:	// Alle Regler sind Aktiv und regeln auf Normalbetrieb
				
	 	SM.bVollautomatikModbus 			:= TRUE;
		SM.bManuellerModus					:=FALSE;

	(*Schütze werden geschaltet. Timer wird auf 1 Stunde gestellt. *)
	Vereisung();
	
	(*Regler aktivieren *)
		VD_Ventilator_ON := 				TRUE;
		PID_KP.Aktiv:= 						TRUE;
		PID_VF_Ventilator.Aktiv:= 			TRUE;
		PID_VD_defrost_Ventilator.Aktiv:= 	FALSE;
		Regelung();
		
	//======nächster Modus====					
		SM.Status:=Anlagenschutz;
			
Manuell: // Regler müssen manuell auf Aktiv umgestellt werden

	(*Schütze werden geschaltet. Timer wird auf 1 Stunde gestellt. *)
	Vereisung();
	
	(*Regler müssen manuell aktiviert werden *)
		VD_Ventilator_ON := 				FALSE;
		PID_KP.Aktiv:= 						FALSE;
		PID_VF_Ventilator.Aktiv:= 			FALSE;
		PID_VD_defrost_Ventilator.Aktiv:= 	FALSE;
		Regelung();
	
	//======nächster Modus====	
		IF  SM.bAnlagenschutzModus THEN
			SM.Status:=Anlagenschutz;
			ELSE
			SM.Status:=Schreiben;
		END_IF
	
		

Abtauen: //Der Verdampfer wird abgetaut. Über GVL wird der Abtaumodus ausgewählt	
	
	(*Regler werden im Programm Abtauen() aktiviert und deaktiviert*)
	Abtauung();
	Regelung();
	
	//======nächster Modus====					
		SM.Status:=Anlagenschutz;
		
Anlagenschutz: //Anlagenschutzsysteme überschreiben ggf. Anweisungen

	//======nächster Modus====					
		SM.Status:=Schreiben;

		
Schreiben:		//Native Werte werden zurückgerechnet und an Klemmen übergeben

	Temperatur();
	SchreibeSollwerte();
	
	//======nächster Modus====			
		SM.Status:=Lesen;

ELSE
	SM.bFehler := TRUE;
END_CASE

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>