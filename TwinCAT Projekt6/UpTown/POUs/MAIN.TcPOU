<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="MAIN" Id="{7650379b-af73-431c-a084-bfa6692fa016}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	timer: TON;

	REALtime: REAL := 12.5;
	Zeit  : TIME;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF SM.bNeuInitialisieren THEN 	(*Prüfen ob neu initialisiert werden muss*)	
	SM.Status:= Initialisieren;
END_IF


Zeit:= REAL_TO_TIME(REALtime);

(*Status-Maschine wird durchlaufen*)
CASE SM.Status OF
	
Initialisieren: //Parameter und Standardwerte aus Datenbank lesen und übergeben
	
	(* Datenbanken werden eingelesen*)
	IF bLeseStoffwerte THEN 
	DB_Lesen_r134a();				//Liest die Stoffwerte von dem Kältemittel R134a ein
	DB_Lesen_Enthalpie_r134a();		//Liest die Enthalpien abhängig von der Temperatur und dem Druck von dem Kältemittel R134a ein
	END_IF
	DB_Lesen_Komponenten();		
	DB_Lesen_PID();

	//======nächster Modus====
		IF 	DB_Lesen_r134a.Busy_Lesen = FALSE 				//DB eingelesen =  TRUE 
		AND DB_Lesen_Enthalpie_r134a.Busy_Lesen = FALSE	 	//DB eingelesen =  TRUE 
		AND DB_Lesen_Komponenten.Busy_Lesen = FALSE			//DB eingelesen =  TRUE 
		AND DB_Lesen_PID.Busy_Lesen = FALSE					//DB eingelesen =  TRUE 
// !!!	AND WaagenKalibrierungFertig = TRUE					//Waagen sind kalibriert
// !!!	AND WAAGEN.bWaagenVorbelastet = TRUE 				//Waagen sind vorbelastet und Offset ist ermittelt & aktiviert
// !!!	AND Lesen_Waagen.bGetOffset_Abgeschlossen = TRUE 	//Offset-Ermittlung der Waagen erfolgreich abgeschlossen
		AND SM.bDBFehler=FALSE 								//TRUE, wenn ein DB-Einlesevorgang nicht erfolgreich abgeschlossen wurde
		THEN	
			bLeseStoffwerte:= FALSE;		
			SM.Status:= Lesen; //Initialisation abgeschlossen
		END_IF
		
	SM.bNeuInitialisieren:=FALSE;
	

Lesen: //Input von Klemmen Lesen und in native Werte umrechen

	Temperatur();
	EnthalpieBerechnen();

(*Waagenprogramme*)
	Schwerpunkt_Eismasse();
	
(*Komunikationsprogramme*)
	Lesen_Waagen();		//Wandelt die empfangenen Daten von den Waagen um 
	Lesen_Modbus();		//Wandelt die empfangenen Daten aus dem Modbus um
	ModbusRTU_COM();
	ModbusRTU_EL();
	
	//======Leerlauf-Modus====
	IF bLeerlauf= TRUE THEN 			// Maschine geht automatisch zunächst in den Leerlauf-Modus
	SM.Status := Leerlauf;
	END_IF
	
	
	//======Kühl-Modus====
		IF bKuehlen THEN 
			bLeerlauf := FALSE;
			
			SM.Status:=Kuehlen; //Regelbetrieb		
		END_IF 
		
	//======Abtau-Modus====
		IF bAbtauen THEN 
			bKuehlen := FALSE;
			bVollautomatikModus:= FALSE;
				
			SM.Status:=Abtauen;
		END_IF
	
(*Abtauen-Modus wird ausgewählt*)

	//======Elektrisch abtauen====	
		IF SM.bAbtauen_elektrisch THEN	
			SM.bAbtauen						:= TRUE;
			SM.bLeerlauf					:= FALSE;
			SM.bKuehlen						:=FALSE;
			SM.bManuellerModus				:=FALSE;
			SM.bAbtauen_Heissgas_oben 		:=FALSE;
			SM.bAbtauen_Heissgas_unten 		:=FALSE;
			bAnlagenschutzModus:=TRUE;		
			
			SM.Status:=Abtauen;
		END_IF
		
	//======Heißgas Oben Abtauen======	
		IF SM.bAbtauen_Heissgas_oben THEN
			SM.bAbtauen						:= TRUE;
			SM.bLeerlauf					:= FALSE;
			SM.bKuehlen						:=FALSE;
			SM.bManuellerModus				:=FALSE;
			SM.bAbtauen_elektrisch			:=FALSE;
			SM.bAbtauen_Heissgas_unten 		:=FALSE;
			bAnlagenschutzModus:=TRUE;
		
			SM.Status:=Abtauen;
		END_IF
		
	//======Heißgas Unten Abtauen======	
		IF SM.bAbtauen_Heissgas_unten THEN
			SM.bAbtauen						:= TRUE;
			SM.bLeerlauf					:=FALSE;
			SM.bKuehlen						:=FALSE;
			SM.bManuellerModus				:=FALSE;
			SM.bAbtauen_elektrisch			:=FALSE;
			SM.bAbtauen_Heissgas_oben 		:=FALSE;
			bAnlagenschutzModus:=TRUE;	
	
			SM.Status:=Abtauen;
		END_IF

		
	//======PumpDown- Modus======
		IF  bPumpDown = TRUE OR bPumpDown_rev = TRUE THEN 
		SM.Status := AnlagenPumpdown; 
		END_IF	
	
	//======Leerlauf Modus======	
		IF bKuehlen = FALSE AND bAbtauen_elektrisch = FALSE AND bAbtauen_Heissgas_oben = FALSE 
		AND bAbtauen_Heissgas_unten = FALSE AND NOT bPumpDown AND NOT bPumpDown_rev // kein Modus ist ausgewählt
	//	OR bAbtauenAbgeschlossen = TRUE																							// ABtauen abgeschlossen
 		THEN 
			bLeerlauf := TRUE;
			
			SM.Status := Leerlauf;
		END_IF
	 
	 

				
Kuehlen:	// Der Verdampfer vereist. Der Timer "TimerVereisung" bestimmt die Zeit der Vereisung.
		
		//======Vollautomatik-Modus====
			IF bVollautomatikModus = TRUE THEN 
			SM.Status:=Vollautomatik;  // Es wird automatisch in den Vollautomatik-Modus gewechselt, falls bManuellerModus-> FALSE ist
			END_IF
			
		//======Manueller-Modus====	
			IF SM.bManuellerModus THEN
				bVollautomatikModus := FALSE;
				
				SM.Status:=Manuell;	
			END_IF
			
		//======Vollautomatik-Modus====
			IF bVollautomatikModus = FALSE AND bManuellerModus = FALSE THEN
				bVollautomatikModus:= TRUE;
				
				SM.Status := Vollautomatik;
			END_IF
		
		//======Kühl-Modus Abbruch====
			IF bKuehlenAbbrechen THEN 
				bKuehlen := FALSE;
				bVollautomatikModus:= FALSE;
				bManuellerModus := FALSE;
				bLeerlauf := TRUE;
				bKuehlenAbbrechen := FALSE;
				bPumpDown_revAbgeschlossen := FALSE;
				SM.Status := Leerlauf;
			END_IF
			

	
Vollautomatik:	// Alle Regler sind Aktiv und regeln auf Normalbetrieb
				
		//SM.bManuellerModus					:=FALSE;
	
	(*Schütze werden geschaltet. Timer wird auf 1 Stunde gestellt. *)
		Vereisung();
		Regelung();
		
	(*Regler aktivieren bzw. deaktivieren*)
		PID_KP.Aktiv:= 						TRUE;
		PID_VF_Ventilator.Aktiv:= 			TRUE;

		
	//======nächster Modus====					
		SM.Status:=Anlagenschutz;
			
		
Manuell: // Regler müssen manuell auf Aktiv umgestellt werden

	(*Schütze werden geschaltet. Timer wird auf 1 Stunde gestellt. *)
		Vereisung();
	
	(*Regler müssen manuell aktiviert werden *)
		PID_KP.Aktiv:= 						FALSE;
		PID_VF_Ventilator.Aktiv:= 			FALSE;
		
		KP_ON:= 							FALSE;
		VD_Ventilator_ON := 				FALSE;
		VD_defrost_Ventilator_ON:= 			FALSE;
		ElektrischeHeizung_ON:= 			FALSE;
		Regelung();
	
	//======nächster Modus====	
		IF  SM.bAnlagenschutzModus THEN
			SM.Status:=Anlagenschutz;
			ELSE
			SM.Status:=Schreiben;
		END_IF
		

Abtauen: (*Der Verdampfer wird abgetaut. Über GVL wird der Abtaumodus ausgewählt*)	
	
	//======Anlagenschutz-Modus====	
		IF  bPumpDownAbgeschlossen = TRUE THEN  	(*Regler werden im Programm Abtauen() aktiviert und deaktiviert*)
			Abtauung();
			Regelung();		
			SM.Status := Anlagenschutz;
		END_IF
	
	//======PUMPDOWN-Modus====		
		IF  bPumpDownAbgeschlossen = FALSE THEN  // PUMPDOWN erforderlich für Abtau-Modus
			bPumpDown := TRUE;
			SM.Status := AnlagenPumpdown;	
  		END_IF

	
	//======Abtau-Modus wird agebrochen====	
		IF bAbtauenAbbrechen THEN 
			SM.bAbtauen := FALSE;
			SM.bAbtauen_elektrisch			:=FALSE;
			SM.bAbtauen_Heissgas_oben 		:=FALSE;
			SM.bAbtauen_Heissgas_unten		:=FALSE;
			SM.bAbtauenAbbrechen			:=FALSE;
			SM.Status := Leerlauf;
		END_IF

	
AnlagenPumpDown: //Anlage wird abgepumpt. Kältemittel wird in den Sammler gedrückt

	PumpDownProgramm();
	Regelung();
	IF 	bPumpDown= FALSE AND bPumpDown_rev= FALSE THEN
		bNeuInitialisieren:= TRUE;  (*Soll-Regelwerte aus der Datenbank lesen *)
	END_IF
	
	//======nächster Modus====	
		SM.Status:= Anlagenschutz;
			
		(*//======Leerlauf-Modus====	
		IF bPumpDownAbgeschlossen OR bPumpDown_revAbgeschlossen THEN  	
				SM.Status:=Leerlauf; //Anlage wird in den Leerlauf versetzt
		END_IF	
		*)
	
Leerlauf: (* Anlage ist im Leerlauf.  1) Kühlen oder Abtauen wurde ABGEBROCHEN, 
									3) Anlagenschutz hat die Anlage in den Status Leerlauf versetzt*)
	//bLeerlauf := TRUE;
	Regelung();
	
	//PumpDOWN wird abgebrochen falls nötig
		bPumpDown	:= FALSE;
		bPumpDown_rev:= FALSE;
										
	//Regler deaktivieren und Freigabe ausschalten
		KP_ON:= 					FALSE;
		VD_Ventilator_ON:= 			FALSE;
		VD_defrost_Ventilator_ON:=  FALSE;
		PID_KP.Aktiv := 			FALSE;
		PID_VF_Ventilator.Aktiv:=	FALSE;

	//======nächster Modus====	
		bAnlagenschutzModus:=TRUE;		
		SM.Status:=Anlagenschutz;

			
Anlagenschutz: //Anlagenschutzsysteme überschreiben ggf. Anweisungen
	
	Kompressorschutz();
	Sonstiges();

	//======nächster Modus====					
		SM.Status:=Schreiben;

		
Schreiben:		//Native Werte werden zurückgerechnet und an Klemmen übergeben

	Temperatur();
	SchreibeSollwerte();
	
	//======nächster Modus====			
		SM.Status:=Lesen;
ELSE
	SM.bFehler:= TRUE;
END_CASE

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>