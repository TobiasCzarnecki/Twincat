<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="ModbusRTU_COM" Id="{69b407b8-16ef-438c-8d44-4b6ab31a34dd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ModbusRTU_COM

(*Dieses Programm komuniziert über einen MODBUS-RTU mit den installieren Drucksensoren(PT),
den E-Ventilen und dem Massenstromsensor im Kältekreislauf. Die Senoren/Aktoren besitzen eine 
eindeutige Adresse. Über die Adressen werden sie vom MASTER(Pc) angesprochen und führen die
verlange Funktion durch.

Dieses Programm ist erst nach Initialierung, sprich Zuweisung der Adressen, zu verwenden.
Wenn mehrere Sensoren/Aktoren die gleiche Adresse haben, kommt es zu Fehlern in der Kommunikation.
Die Kommunikation verläuft in einer CASE-Struktur.*)

VAR
(*
_________________________________________________________	
Drucksensoren	|	Position im RI	|	Modbus-Adresse
PT_KP_in		|	1				|	4
PT_KP_out		|	2				|	5
PT_VF_in		|	2‘ 				|	6
PT_VF_out		|	3‘ 				|	7
PT_vor_EV 		|	3 (innerhalb KK)|	8 
PT_vor_EV_rev 	|	3 (außerhalb KK)|	9
PT_VD_in		|	4				|	10
PT_VD_out		|	1‘ 				|	11
__________________________________________________________
Massenstromsensor
MSS 1			|	3				|	12 
*)
	
	state: INT;

(*Variablen für die Modbus-Befehle*)
	 ModbusAdresse: 	BYTE := 3;
	 modbusData_PT: 	ARRAY[0..12] OF DWORD;		//hier werden die Daten von den Drucksensoren gespeichert
	 
(*Abfrageregister vom MassenstromSensor*)
	AbfrageRegs_MSS:ARRAY[1..5] OF INT := [30000,30002,30004,30006,30008]; 	

(*Abfrageregister vom MassenstromSensor*)
	AbfrageRegs_PT:WORD := 2; 	
	LaengeRegs: BYTE:= 2;
	
(*Variablen für Error- und Successzähler der Modbus-Komunikation *)
	FtrigBusy:			F_TRIG;
	LastErrorstate: 	INT;
	LastModbusError: 	ST_ModbusErrorDiagnostics;
	CounterError: 		DINT;
	CounterSuccess: 	DINT;
	counter: 			INT := 1;
	Teststring: T_MaxString;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*Falls ein Slave konfiguriert werden soll bConfigPT auf TRUE setzen*)
		
IF 	bConfigPT THEN 
	Status_Modbus := ConfigPT;
ELSE 
	Status_Modbus := Aktiv;
END_IF


CASE Status_Modbus OF
	
Aktiv: 

CASE state OF

0: (*Initialisierung von Modbus und Durchzählen der Modbus-Adressen*)
		MODBUS.myModbus.ReadRegs(Execute:= FALSE);
		MODBUS.myModbus.WriteRegs(Execute:= FALSE);

		
		ModbusAdresse := ModbusAdresse + 1;		//Laufvariable für die ModbusAdressen der Slaves. Zunächst nur Drucksensoren.
		IF ModbusAdresse >= 13 THEN				//alle PTs und der Massenstromsensor werden ausgelesen
			ModbusAdresse := 4;
		END_IF
		
		
		state := state + 1;


1:	(* Lese Keller-Registers aus*)	
     
	IF ModbusAdresse<=11 AND ModbusAdresse>=4 THEN 
	 MODBUS.myModbus.ReadRegs (* Reads data from a connected slave. *)
 		(
 		 UnitID:= ModbusAdresse,
 		 Quantity:= LaengeRegs,								//zwei Register werden ausgelesen
 		 MBAddr:= AbfrageRegs_PT,								//P1 wird bei Adresse 2 ausgelesen, TOB1 bei Adresse 8
 		 cbLength:= SIZEOF(modbusData_PT[ModbusAdresse]),		
 		 pMemoryAddr:= ADR(modbusData_PT[ModbusAdresse]),		//Empfangene Daten werden in DWORD in modbusData geschrieben.
  		Execute:= TRUE,
  		Timeout:= modbusTimeout,
  		Busy => Modbus.isModbusBusy,
  		Error => isModbusError,
  		ErrorId => modbusErrorId
  		(* cbRead parameter *));
		
  		IF NOT isModbusBusy THEN
				MODBUS.myModbus.ReadRegs(Execute:= FALSE);
			IF MODBUS.myModbus.Error THEN
				state := 0;
			ELSE
				state := state + 1;
			END_IF
		END_IF
		ELSE 
		state := state + 1;
	END_IF
	
	
	
2:	(* Lese Massenstromsensor-Registers aus*)		
	(*	Folgende Messdaten werden ausgelesen:
			
				   Messgröße		|	Einheit	|	Register-Adressen
				____________________|___________|_____________________   
				1) Fließgeschw.     |	[m/s]	|	30000-2 Regs
				2) Volumenstrom		|	[m³/s]	|	30002-2 Regs
				3) Massenstrom		|	[kg/s]	|	30004-2 Regs
				4) Temperatur		|	[K]		|	30006-2 Regs
				5) Dichte			|	[kg/m³]	|	30008-2 Regs			->ingesamt 10 Regs
		*) 
	IF ModbusAdresse=12 THEN	
		myModbus.ReadInputRegs(
		UnitID:= 12,
 		Quantity:= 2,							
 		MBAddr:= INT_TO_WORD(AbfrageRegs_MSS[counter]),								
 		cbLength:= SIZEOF(MSS.Data[counter]),		
 		pMemoryAddr:= ADR(MSS.Data[counter]),	 
  		Execute:= TRUE,
  		Timeout:= modbusTimeout,
  		Busy => isModbusBusy,
  		Error => isModbusError,
  		ErrorId => modbusErrorId
  		(*cbRead parameter)*));
	
			IF isModbusBusy = FALSE AND counter<=5 THEN
				myModbus.ReadInputRegs(Execute:= FALSE);
				counter:= counter +1;
			END_IF	
			
			IF isModbusBusy = FALSE AND counter>5 THEN
				myModbus.ReadInputRegs(Execute:= FALSE);
				counter:=1;
				state:= 0;
			END_IF	
	ELSE 
		state:= 0;
	END_IF	
END_CASE	

ConfigPT:
	
	ConfigDrucksensor(); 		//Programm für Konfigurierung von Keller-Drucksensoren

END_CASE 

// Zählen der erfolgreichen und fehlerhaften Komunikationsschritte 
FtrigBusy(CLK:=myModbus.BUSY );
IF FtrigBusy.Q THEN
	IF MODBUS.myModbus.Error THEN
		LastModbusError := MODBUS.myModbus.ErrorDiagnostics;
		LastErrorstate := state;
		CounterError := CounterError + 1;
	ELSE
		CounterSuccess := CounterSuccess + 1;
	END_IF
END_IF

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>