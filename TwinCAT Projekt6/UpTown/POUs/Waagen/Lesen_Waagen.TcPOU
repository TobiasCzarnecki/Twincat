<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="Lesen_Waagen" Id="{58121edd-f273-4acb-92a5-8b8bc8fa1c60}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Lesen_Waagen
(* Dieses Program wird dazu verwendet den aktuellen Waagenwert(String) aus dem Zwischenspeicher (RxBuffer) 
	zu entnehmen. Nach der Verarbeitung im Funktionsbaustein werden alle Werte der Waage_X wieder sich
	zugewiesen und gespeichert. *)  

VAR
	fb_WaageAuslesen : ARRAY[1..6] OF FB_GewichtAuslesen;
	counter: INT;
	myOffset: REAL;
	
(*Variablen für Offset-Ermittlung *)
	Timer,Timer1: TON;
	Trigger:  ARRAY[1..4] OF SH_1;
	GetOffset:ARRAY[1..4] OF FT_AVG;;
	bOffset: 		BOOL := FALSE;
	//bGetOffset: 		BOOL;

END_VAR

VAR PERSISTENT 
	Offset_WaagenVorbelastung: 	ARRAY[1..4] OF REAL; 
	Offset_Ventilator_AN: 		ARRAY[1..4] OF REAL; 
	Offset_Kaltemittel_g: 		ARRAY[1..4] OF REAL; 
	Offset_Kaltemittel_f: 		ARRAY[1..4] OF REAL; 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// 	Waagen 1..6 werden ausgelesen. 
FOR counter:= 1 TO 6 DO 
	fb_WaageAuslesen[counter](myWaage:= Waage[counter] , myBuffer:= RxBuffer[counter] , Waage=> Waage[counter] );
	Waage_roh[counter] := Waage[counter].Masse;
END_FOR


(*	Waagen 1..4 werden falls nötig mit einem OFFSET korrigiert. zB durch Laufen der Ventilatoren*)
FOR counter:= 1 TO 4 DO 
	Waage_Offset[counter] := OFFSET(
	X:= Waage[counter].Masse, 
	O1:= bOffset, 				//wird TRUE nach dem ersten TARE-Befehl. Waagen sind wieder bei '0g'
	O2:= VD_Ventilator_ON, 
	O3:= VD_Kaltemittel_g, 
	O4:= VD_Kaltemittel_l, 
	D:=  FALSE, 
	Offset_1:= -Offset_WaagenVorbelastung[counter],
	Offset_2:= -Offset_Ventilator_AN[counter],  
	Offset_3:= -Offset_Kaltemittel_g[counter], 
	Offset_4:= -Offset_Kaltemittel_f[counter], 
	default:= 10000);
END_FOR



//CASE SM.Status OF
	
//Initialisieren: 

IF 	bTare 	OR bGetOffset_Ventilator 	 OR bGetOffset_Kaltemittel_g OR	bGetOffset_Kaltemittel_l THEN 
	bTare_Abgeschlossen := FALSE;
	bVentilator_Abgeschlossen:=FALSE;
	//bGetOffset:= TRUE;
	Timer(IN:= TRUE, PT:=T#60S , Q=> , ET=> );
	//ELSE 
	//bGetOffset:= FALSE;
END_IF

//Offset wird bestimmt für den Fall, dass die Waagen mit ca. 2000 g vorbelastet sind
	IF bTare THEN 
		FOR counter:= 1 TO 4 DO 
			Trigger[counter](in:= Waage[counter].Masse, PT:= T#1S, out=> , Trig=> );
			GetOffset[counter](IN:= Trigger[counter].out, E:= Trigger[counter].Trig, N:= 30, RST:= , AVG=>Offset_WaagenVorbelastung[counter] );	
		END_FOR
		bTare:= FALSE; // Offset wird nun von den Rohwerten abgezogen
		bOffset:= TRUE;
	END_IF


//Offset wird bestimmt für den Fall, dass der VENTILATOR an ist
	IF bGetOffset_Ventilator THEN
		VD_Ventilator_ON:= TRUE;
		Timer1(IN:=TRUE, PT:= T#30S); 
		IF Timer1.Q THEN 
		FOR counter:= 1 TO 4 DO 
			Trigger[counter](in:= Waage[counter].Masse, PT:= T#1S, out=> , Trig=> );
			GetOffset[counter](IN:= Trigger[counter].out, E:= Trigger[counter].Trig, N:= 30, RST:= , AVG=>Offset_Ventilator_AN[counter] );	
		END_FOR
		bVentilator_Abgeschlossen:=TRUE;
		Timer1(IN:=FALSE);
		END_IF
	END_IF

//Offset wird bestimmt für den Fall, dass das KÄLTEMITTEL GASFÖRMIG ist
	IF bGetOffset_Kaltemittel_g THEN 
		FOR counter:= 1 TO 4 DO 
			Trigger[counter](in:= Waage[counter].Masse, PT:= T#1S, out=> , Trig=> );
			GetOffset[counter](IN:= Trigger[counter].out, E:= Trigger[counter].Trig, N:= 30, RST:= , AVG=>Offset_Kaltemittel_g[counter] );	
		END_FOR
	END_IF

//Offset wird bestimmt für den Fall, dass das KÄLTEMITTEL FLÜSSIG ist	
	IF bGetOffset_Kaltemittel_l THEN 	
		FOR counter:= 1 TO 4 DO 
			Trigger[counter](in:= Waage[counter].Masse, PT:= T#1S, out=> , Trig=> );
			GetOffset[counter](IN:= Trigger[counter].out, E:= Trigger[counter].Trig, N:= 30, RST:= , AVG=>Offset_Kaltemittel_f[counter] );	
		END_FOR
	END_IF

//Nachdem die Zeit abgelaufen ist, werden die BOOL-Variablen zurückgesetzt
	IF Timer.Q THEN
		VD_Ventilator_ON					:= FALSE;
		bTare    							:= FALSE;
		bGetOffset_Ventilator 				:= FALSE;
		bGetOffset_Kaltemittel_g			:= FALSE; 
		bGetOffset_Kaltemittel_l 			:= FALSE;
		bGetOffset_Abgeschlossen			:= TRUE;	
		Timer(IN:= FALSE);	
	END_IF
	
//END_CASE
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>