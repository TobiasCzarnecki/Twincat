<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="Schwerpunkt_Eismasse" Id="{435a4698-bf4e-4530-9411-3a8d988b1d27}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Schwerpunkt_Eismasse
VAR


(*Gewicht von den vier Waagen angegeben in [g]. Die Waage zeigt einmal ein Gewicht an. Das tatsächliche Waage_k wird berechnen mit
Waage_k:= AnzeigeGewicht / k.  
*)

	alleDatenPositiv:	BOOL; 

(* Umrechnungsfaktoren k bezeichnet den Anteil des angezeigten Wertes von der 
	tatsächliche Masse, die den Verdampfer belastet *)
	fb_kIstBerechnung1: FB_kIstBerechnung;
	fb_kIstBerechnung2: FB_kIstBerechnung;
	fb_kIstBerechnung3: FB_kIstBerechnung;
	fb_kIstBerechnung4: FB_kIstBerechnung;
		
//Positionen der Kalibrieungsgewichte
	xPosition_KG: ARRAY [1..4] OF REAL := [-630,630,630,-630];
	yPosition_KG: ARRAY [1..4] OF REAL := [-150,-150,150,150];
	
//Positionen der Waagen unter dem Verdampfer in x und y-Richtung

	xPositionWaage : ARRAY[1..4] OF REAL := [-272.5, 272.5, 272.5, -272.5];
	yPositionWaage : ARRAY[1..4] OF REAL := [-760, -760, 280, 280];
	
//Anteil der Waagen an der Gesamtsumme
	Anteil_W : ARRAY[1..4] OF REAL;
	counter			:INT;


(*Kalibrierungsdaten für jede Waage. Werden vor jeder Messung mit mehreren Kalibrierungsgewichten 
	ermittelt. [0] entspricht dem Kallibriegungsgewicht.[1..4] sind die Positionen der Belastung,
	siehe Dokumentation*)
	
	state: INT := 0;
	
(*Zur Kältemittelmengen-Berechnung im Verdampfer*)

	m_134a 		: REAL; // in kg
	Rohrinhalt	: REAL:= 12.8;// Rohrvolumen in Liter vom Verdampfer;
	Dichte		: REAL;
	Dichte_PT1  : REAL;
	Pt1 		: FT_PT1;
	BerechneDichte: FB_GetEnthalpie;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Waage[1].Nummer := 1;
Waage[2].Nummer := 2;
Waage[3].Nummer := 3;
Waage[4].Nummer := 4;


CASE state OF


0: 	
	
	IF WaagenKalibrierungFertig = FALSE THEN 
	state:= 10;
	ELSE 
	state:=1;
	END_IF
	


1: 
	//Kontrolle der Vorzeichen der vier Waagen
	IF Waage_Offset[1] >0 AND Waage_Offset[2] >0 AND Waage_Offset[3] >0  AND Waage_Offset[4]>0 THEN
		alleDatenPositiv := TRUE;
		ELSE
		alleDatenPositiv := FALSE;
	END_IF
	state:=2;


2:
	//Gewichtsanteil W jeder Waage berechnen

		Anteil_W[1]:= Waage_Offset[1]/(Waage_Offset[1]+Waage_Offset[2]+Waage_Offset[3]+Waage_Offset[4]);//(Waage[1].k_ist*Summe_Eis) ;
		Anteil_W[2]:= Waage_Offset[2]/(Waage_Offset[1]+Waage_Offset[2]+Waage_Offset[3]+Waage_Offset[4]);//(Waage[2].k_ist*Summe_Eis) ;
		Anteil_W[3]:= Waage_Offset[3]/(Waage_Offset[1]+Waage_Offset[2]+Waage_Offset[3]+Waage_Offset[4]);//(Waage[3].k_ist*Summe_Eis) ;
		Anteil_W[4]:= Waage_Offset[4]/(Waage_Offset[1]+Waage_Offset[2]+Waage_Offset[3]+Waage_Offset[4]);//(Waage[4].k_ist*Summe_Eis) ;
		
	state:=3;
	
	

3:
	//Aktuelle Position vom Schwerpunkt

	xPosition_SP_0:= Anteil_W[1]*xPositionWaage[1]+ Anteil_W[2]*xPositionWaage[2] + Anteil_W[3]*xPositionWaage[3] + Anteil_W[4]*xPositionWaage[4];
	yPosition_SP_0:= Anteil_W[1]*yPositionWaage[1]+ Anteil_W[2]*yPositionWaage[2] + Anteil_W[3]*yPositionWaage[3] + Anteil_W[4]*yPositionWaage[4];
	
	state:= 4;


4:
	//Aktueller k-Wert von jeder Waage wird ausgerechnen

	fb_kIstBerechnung1(myWaage:=Waage[1],Nummer:=1 , outWaage=>Waage[1]);
	fb_kIstBerechnung2(myWaage:=Waage[2],Nummer:=2 , outWaage=>Waage[2]);
	fb_kIstBerechnung3(myWaage:=Waage[3],Nummer:=3 , outWaage=>Waage[3]);
	fb_kIstBerechnung4(myWaage:=Waage[4],Nummer:=4,  outWaage=>Waage[4]);
	
	state:=5;


5: 
	//Tatsächliches Gewicht wird für jede Waage ausgerechnet

	 Waage_k[1]:=	Waage_Offset[1]/ k_alleDaten[1].k_Kalibrierung[1,1];	//Waage_Offset[1] / Waage[1].k_ist;
	 Waage_k[2]:=	Waage_Offset[2]/ k_alleDaten[1].k_Kalibrierung[2,2];	//Waage_Offset[2] / Waage[2].k_ist;
	 Waage_k[3]:=	Waage_Offset[3]/ k_alleDaten[1].k_Kalibrierung[3,3];	//Waage_Offset[3] / Waage[3].k_ist;
	 Waage_k[4]:=	Waage_Offset[4]/ k_alleDaten[1].k_Kalibrierung[4,4];	//Waage_Offset[4] / Waage[4].k_ist;
	 
	 state:=6;


6: 
	(*Funktionsbausteine zur Dichteermittlung und Glättung*)
	BerechneDichte(In_Druck:= PT_VD_out.rDruck,In_Temperatur:=Temp_VD_Surface_gemittelt, Dichte_v=>Dichte); //Druck nach VD wegen Venturiverteiler, Temp Surface wegen Einspritzung
	Pt1(in:= Dichte,T:= T#12S, K:= 1, out=>Dichte_PT1);
	m_134a:= Rohrinhalt *Dichte_PT1  ; // Kältemittelmenge im Verdampfer. Dichte: f(T:= Surface_gemittelt, p:= VD_out)
	
	//Gesamtsumme aus den vier Waagen ausrechnen
	Summe_Eis:= -m_134a	+ Waage_Offset[1]/ k_alleDaten[1].k_Kalibrierung[1,1]+Waage_Offset[2]/ k_alleDaten[1].k_Kalibrierung[2,2]+Waage_Offset[3]/ k_alleDaten[1].k_Kalibrierung[3,3]+Waage_Offset[4]/ k_alleDaten[1].k_Kalibrierung[4,4]	;							//Waage_k[1]+Waage_k[2]+Waage_k[3]+Waage_k[4];
	
	state:=0;


10:	ConfigWaage();
	
	IF WaagenKalibrierungFertig THEN 
	state:= 0;
	//bWaagenKalibrierung:= FALSE;
	END_IF
	
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>